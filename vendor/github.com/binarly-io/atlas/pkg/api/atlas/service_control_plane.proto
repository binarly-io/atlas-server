// Copyright 2020 The Atlas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Control Plane.

 * Control Plane represents communication between server and client(s).
 * Communication is logically structured into the following areas:
 *
 *   - Commands. Commands flow into both directions, thus server can send commands to clients and clients can send
 *     commands to server. Commands is usually a long-live connection, in order for clients and server
 *     to receive commands with minimal delay. However, nothing prevents clients to connect to server
 *     from time to time as necessary and exchange commands.
 *
 *   - DataChunks. DataChunks flow into both directions, thus server can send data stream to clients and clients
 *     can send data stream to Server. Some commands can be followed by bulk data steamed from client and/or server.
 *
 *   - Metrics. Metrics are sent from client to server in order for server to keep track of client's activities.
 *
 *   - Status. Status requests are sent from client to server in order to check status of the entity(es). Status calls
 *     are usually used for "check status and send updates" logic.
 */
syntax = "proto3";

package atlas;

import "type_command.proto";
import "type_data_chunk.proto";
import "type_metric.proto";
import "type_status_request.proto";
import "type_status_request_multi.proto";
import "type_status_reply.proto";

service ControlPlane {
	/**
	 * Bi-directional Commands stream.
	 * Commands are sent from service to client and from client to server
	 */
	rpc Commands (stream Command) returns (stream Command) {}

	/**
	 * Bi-directional Data stream.
	 * Some commands may be followed by data load. Be it logs, dumps, etc.
	 */
	rpc DataChunks (stream DataChunk) returns (stream DataChunk) {}

	/**
	 * Uni-directional Metrics stream from client to server.
	 */
	rpc Metrics (stream Metric) returns (Metric) {}

	/**
	 * EntityStatus checks status of the entity on the server.
	 */
	rpc EntityStatus(StatusRequest) returns (StatusReply) {}

	/**
	 * EntityStatusMulti checks status of the multiple entities on server.
	 */
	rpc EntityStatusMultiple(StatusRequestMulti) returns (StatusReply) {}
}
