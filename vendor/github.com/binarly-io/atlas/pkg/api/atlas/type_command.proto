// Copyright 2020 The Atlas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Command is a command used for commands exchange by Control Plane.
 */
syntax = "proto3";

package atlas;

import "type_metadata.proto";
import "type_address.proto";

// CommandType represents all commands in the system
enum CommandType {
    // Due to first enum value has to be zero in proto3
    COMMAND_RESERVED = 0;
    // Unspecified
    COMMAND_UNSPECIFIED = 100;
    // Echo request expects echo reply as an answer
    COMMAND_ECHO_REQUEST = 200;
    // Echo reply is an answer to echo request
    COMMAND_ECHO_REPLY = 300;
    // Request for configuration from the other party
    COMMAND_CONFIG_REQUEST = 400;
    // Configuration
    COMMAND_CONFIG = 500;
    // Metrics schedule sends schedule by which metrics should be sent.
    COMMAND_METRICS_SCHEDULE = 600;
    // Metrics request is an explicit request for metrics to be sent
    COMMAND_METRICS_REQUEST = 700;
    // One-time metrics
    COMMAND_METRICS = 800;
    // Schedule to send data
    COMMAND_DATA_SCHEDULE = 900;
    // Explicit data request
    COMMAND_DATA_REQUEST = 1000;
    // Data are coming
    COMMAND_DATA = 1100;
    // Address is coming
    COMMAND_ADDRESS = 1200;
    COMMAND_EXTRACT = 1300;
    COMMAND_EXTRACT_EXECUTABLES = 1400;
}

// Command represents a command used by Control Plane to exchange commands between server and client(s).
message Command {
    // Header of the command
    Metadata header = 100;

    // Optional. Any arbitrary sequence of bytes no longer than 2^32
    bytes bytes = 200;

    // Optional. Multiple addresses.
    repeated Address addresses = 300;

    // Optional. Recursive chain of commands
    repeated Command commands = 400;
}
